<% content_for(:title, t('.title')) %>
<div class="place-list-map">
  <div class="place-map">
    <div id="map"></div> <!-- 地図を表示する領域 -->
  </div>
  <div class="place-list">
    <div class="row row-cols-1 row-cols-md-2 g-4">
      <% @places.each_with_index do |place, index| %>
        <div class="col">
          <div class="card">
            <%= link_to place_path(place) do %>
              <div class="card-body">
                <% photo_url = "https://maps.googleapis.com/maps/api/place/photo?photoreference=#{@photos[index]}&sensor=false&maxheight=600&maxwidth=600&key=#{ENV['GOOGLE_MAPS_API_KEY']}" %>
                <%= image_tag(photo_url) %>
                <div class="card-text">
                  <h5><%= place.name %></h5>
                  <p><%= place.eng_name %></p>
                </div>
              </div>
            <% end %>
            <% if logged_in? %>
              <div class="list-button">
                <%= render 'list_button', place: place %>
              </div>
            <% end %>
          </div>
        </div>
      <% end %>
    </div>
  </div>
</div>
<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_MAPS_API_KEY'] %>&libraries=places&callback=initMap" async defer></script>
<script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
<script>
  document.addEventListener('turbo:load', function() {
  if (document.getElementById('map') !== null) {
    function initMap() {
      const places = gon.places;
      const map = new google.maps.Map(document.getElementById('map'), {
        center: {lat: 35.676192, lng: 139.750311},
        zoom: 12
      });

      let currentInfoWindow = null;

      const generateInfoWindowContent = (place) => {
        let place_id = place.google_place_id;

        return `
          <a href="/place/${place.id}"><h3>${place.name}</h3></a>
          <a href="https://www.google.com/maps/place/?q=place_id:${place_id}" target="_blank">google mapで開く</a>
        `;
      };

      const openInfoWindow = (infoWindow, marker) => {
        if (currentInfoWindow) {
          currentInfoWindow.close();
        }
        infoWindow.open(map, marker);
        currentInfoWindow = infoWindow;
      };

      if (Array.isArray(places)) {
        places.forEach(place => {
          const marker = new google.maps.Marker({
            map: map,
            position: {lat: place.latitude, lng: place.longitude}
          });

          const content = generateInfoWindowContent(place);

          const infoWindow = new google.maps.InfoWindow({
            content: content
          });

          marker.addListener('click', function() {
            openInfoWindow(infoWindow, marker);
          });
        });
      } else if (places) {
        const marker = new google.maps.Marker({
          map: map,
          position: {lat: places.latitude, lng: places.longitude}
        });

        const content = generateInfoWindowContent(places);

        const infoWindow = new google.maps.InfoWindow({
          content: content
        });

        marker.addListener('click', function() {
          openInfoWindow(infoWindow, marker);
        });
      }
    }
    window.initMap = initMap;
  }
});

</script>